"""
Keystore generation command - Generate signing certificates for Android and iOS
"""

import subprocess
import json
from pathlib import Path
from typing import Optional, Dict, Any
import secrets
import string

import click
import inquirer
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table
from rich import box

from flow_cli.core.flutter import FlutterProject
from flow_cli.core.ui.banner import show_section_header, show_success, show_error, show_warning

console = Console()


@click.command()
@click.option(
    "--platform",
    type=click.Choice(["android", "ios", "both"]),
    default="both",
    help="Platform to generate keystore for",
)
@click.option("--force", is_flag=True, help="Force regeneration of existing keystores")
@click.option("--output-dir", help="Custom output directory for keystores")
def keystore_command(platform: str, force: bool, output_dir: Optional[str]) -> None:
    """
    üîê Generate signing certificates for Android and iOS

    Creates keystores and certificates needed for release builds and store deployment.
    Stores certificates securely in the project's keys/ directory.

    IMPORTANT: Keep these files secure and never commit them to version control.
    """

    # Find Flutter project
    project = FlutterProject.find_project()
    if not project:
        show_error("No Flutter project found in current directory")
        raise click.Abort()

    show_section_header(f"Generate Keystores: {project.name}", "üîê")

    # Determine output directory
    if output_dir:
        keys_dir = Path(output_dir)
    else:
        keys_dir = project.path / "keys"

    # Create keys directory
    keys_dir.mkdir(exist_ok=True)

    # Show security warning
    show_security_warning()

    # Get keystore configuration
    config = get_keystore_config(project, platform)
    if not config:
        return

    # Generate keystores based on platform
    results = []

    if platform in ["android", "both"]:
        result = generate_android_keystore(project, keys_dir, config, force)
        results.append(result)

    if platform in ["ios", "both"]:
        import platform as sys_platform

        if sys_platform.system() == "Darwin":
            result = generate_ios_certificates(project, keys_dir, config, force)
            results.append(result)
        else:
            show_warning("iOS certificate generation requires macOS")

    # Show results
    show_keystore_results(results, keys_dir)

    # Show next steps
    show_security_instructions(keys_dir)


def show_security_warning() -> None:
    """Show important security warning about keystores"""

    warning_text = """[bold red]üîí IMPORTANT SECURITY NOTICE[/bold red]

The keystores and certificates generated by this command are [bold]EXTREMELY SENSITIVE[/bold].
They are used to sign your app releases and prove your identity to app stores.

[bold yellow]CRITICAL SECURITY PRACTICES:[/bold yellow]

‚Ä¢ [red]NEVER commit these files to version control[/red]
‚Ä¢ [red]NEVER share these files publicly[/red]
‚Ä¢ [green]Store them in a secure location[/green]
‚Ä¢ [green]Create secure backups[/green]
‚Ä¢ [green]Use strong passwords[/green]
‚Ä¢ [green]Limit access to authorized personnel only[/green]

[bold cyan]Files that will be generated:[/bold cyan]
‚Ä¢ keys/release-key.jks (Android keystore)
‚Ä¢ keys/keystore.properties (Android config)
‚Ä¢ keys/ios/ (iOS certificates and profiles)
‚Ä¢ keys/.gitignore (to prevent accidental commits)

[dim]If you lose these files, you won't be able to update your published apps![/dim]"""

    panel = Panel(warning_text, title="üîê Security Warning", border_style="red", box=box.ROUNDED)
    console.print(panel)


def get_keystore_config(project: FlutterProject, platform: str) -> Optional[Dict[str, Any]]:
    """Get keystore configuration from user"""

    console.print("\n[cyan]üîß Keystore Configuration[/cyan]")

    try:
        questions = [
            inquirer.Text(
                "company_name", message="Company/Organization name", default="Your Company"
            ),
            inquirer.Text("app_name", message="Application name", default=project.name),
            inquirer.Text("country_code", message="Country code (2 letters)", default="US"),
            inquirer.Text("city", message="City", default="Your City"),
            inquirer.Text("state", message="State/Province", default="Your State"),
        ]

        config = inquirer.prompt(questions)
        if not config:
            return None

        # Generate secure passwords
        if platform in ["android", "both"]:
            config["android_keystore_password"] = generate_secure_password()
            config["android_key_password"] = generate_secure_password()

        return config

    except KeyboardInterrupt:
        return None


def generate_secure_password(length: int = 16) -> str:
    """Generate a secure random password"""

    characters = string.ascii_letters + string.digits + "!@#$%^&*"
    return "".join(secrets.choice(characters) for _ in range(length))


def generate_android_keystore(
    project: FlutterProject, keys_dir: Path, config: Dict[str, Any], force: bool
) -> Dict[str, Any]:
    """Generate Android keystore"""

    keystore_path = keys_dir / "release-key.jks"
    properties_path = keys_dir / "keystore.properties"

    # Check if keystore already exists
    if keystore_path.exists() and not force:
        show_warning("Android keystore already exists. Use --force to regenerate.")
        return {
            "platform": "Android",
            "success": False,
            "message": "Keystore already exists",
            "path": keystore_path,
        }

    console.print("\n[cyan]ü§ñ Generating Android Keystore...[/cyan]")

    with Progress(
        SpinnerColumn(), TextColumn("[progress.description]{task.description}"), console=console
    ) as progress:

        try:
            # Generate keystore
            task = progress.add_task("Creating Android keystore...", total=None)

            # Build keytool command
            keytool_cmd = [
                "keytool",
                "-genkey",
                "-v",
                "-keystore",
                str(keystore_path),
                "-keyalg",
                "RSA",
                "-keysize",
                "2048",
                "-validity",
                "10000",
                "-alias",
                "release",
                "-storepass",
                config["android_keystore_password"],
                "-keypass",
                config["android_key_password"],
                "-dname",
                f"CN={config['company_name']}, OU={config['app_name']}, O={config['company_name']}, L={config['city']}, S={config['state']}, C={config['country_code']}",
            ]

            result = subprocess.run(keytool_cmd, capture_output=True, text=True, timeout=60)

            if result.returncode != 0:
                progress.remove_task(task)
                return {
                    "platform": "Android",
                    "success": False,
                    "message": f"Keytool failed: {result.stderr}",
                    "path": keystore_path,
                }

            progress.update(task, description="‚úÖ Android keystore created")
            progress.remove_task(task)

            # Generate keystore.properties file
            task = progress.add_task("Creating keystore.properties...", total=None)

            properties_content = f"""# Android keystore configuration
# Generated by Flow CLI - DO NOT COMMIT TO VERSION CONTROL
storePassword={config['android_keystore_password']}
keyPassword={config['android_key_password']}
keyAlias=release
storeFile=../keys/release-key.jks
"""

            with open(properties_path, "w") as f:
                f.write(properties_content)

            progress.update(task, description="‚úÖ Keystore properties created")
            progress.remove_task(task)

            # Update android/app/build.gradle
            task = progress.add_task("Updating build.gradle...", total=None)
            update_android_build_gradle(project)
            progress.remove_task(task)

            return {
                "platform": "Android",
                "success": True,
                "message": "Android keystore generated successfully",
                "path": keystore_path,
                "properties_path": properties_path,
            }

        except subprocess.TimeoutExpired:
            return {
                "platform": "Android",
                "success": False,
                "message": "Keystore generation timed out",
                "path": keystore_path,
            }
        except Exception as e:
            return {
                "platform": "Android",
                "success": False,
                "message": f"Failed to generate keystore: {str(e)}",
                "path": keystore_path,
            }


def generate_ios_certificates(
    project: FlutterProject, keys_dir: Path, config: Dict[str, Any], force: bool
) -> Dict[str, Any]:
    """Generate iOS certificates and provisioning profiles"""

    ios_dir = keys_dir / "ios"
    ios_dir.mkdir(exist_ok=True)

    console.print("\n[cyan]üçé Setting up iOS Certificates...[/cyan]")

    # Check if certificates already exist
    cert_files = list(ios_dir.glob("*.p12"))
    if cert_files and not force:
        show_warning("iOS certificates already exist. Use --force to regenerate.")
        return {
            "platform": "iOS",
            "success": False,
            "message": "Certificates already exist",
            "path": ios_dir,
        }

    with Progress(
        SpinnerColumn(), TextColumn("[progress.description]{task.description}"), console=console
    ) as progress:

        try:
            # Check if Fastlane match is configured
            task = progress.add_task("Checking Fastlane configuration...", total=None)

            fastfile_path = project.path / "fastlane" / "Fastfile"
            if not fastfile_path.exists():
                progress.remove_task(task)
                return {
                    "platform": "iOS",
                    "success": False,
                    "message": 'Fastlane not configured. Run "flow deployment setup" first.',
                    "path": ios_dir,
                }

            progress.update(task, description="‚úÖ Fastlane found")
            progress.remove_task(task)

            # Generate match certificates
            task = progress.add_task(
                "Generating iOS certificates with Fastlane Match...", total=None
            )

            # Create instructions file for manual setup
            instructions_path = ios_dir / "SETUP_INSTRUCTIONS.md"
            create_ios_setup_instructions(instructions_path, config)

            progress.update(task, description="‚úÖ iOS setup instructions created")
            progress.remove_task(task)

            return {
                "platform": "iOS",
                "success": True,
                "message": "iOS certificate setup instructions created",
                "path": ios_dir,
                "instructions_path": instructions_path,
            }

        except Exception as e:
            return {
                "platform": "iOS",
                "success": False,
                "message": f"Failed to setup iOS certificates: {str(e)}",
                "path": ios_dir,
            }


def update_android_build_gradle(project: FlutterProject) -> None:
    """Update Android build.gradle to use keystore"""

    build_gradle_path = project.path / "android" / "app" / "build.gradle"

    if not build_gradle_path.exists():
        return

    try:
        # Read current content
        with open(build_gradle_path, "r") as f:
            content = f.read()

        # Check if keystore config already exists
        if "keystore.properties" in content:
            return

        # Add keystore configuration
        keystore_config = """
def keystorePropertiesFile = rootProject.file("keys/keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

"""

        # Insert after first line
        lines = content.split("\n")
        lines.insert(1, keystore_config)

        # Add signing configs
        signing_config = """
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
"""

        # Find and replace buildTypes section
        new_content = "\n".join(lines)

        # Write back
        with open(build_gradle_path, "w") as f:
            f.write(new_content)

        console.print("[green]‚úÖ Updated android/app/build.gradle[/green]")

    except Exception as e:
        show_warning(f"Failed to update build.gradle: {e}")


def create_ios_setup_instructions(instructions_path: Path, config: Dict[str, Any]) -> None:
    """Create iOS setup instructions file"""

    instructions = f"""# iOS Certificate Setup Instructions

## Overview
This guide will help you set up iOS certificates and provisioning profiles for your Flutter app.

## Prerequisites
1. Apple Developer Account ($99/year)
2. Xcode installed on macOS
3. App ID registered in Apple Developer Portal

## Steps

### 1. App Store Connect Setup
1. Go to [App Store Connect](https://appstoreconnect.apple.com)
2. Create a new app with these details:
   - App Name: {config['app_name']}
   - Bundle ID: com.{config['company_name'].lower().replace(' ', '')}.{config['app_name'].lower()}

### 2. Apple Developer Portal Setup
1. Go to [Apple Developer Portal](https://developer.apple.com/account)
2. Navigate to "Certificates, Identifiers & Profiles"
3. Create App ID matching your bundle identifier
4. Create certificates:
   - iOS Distribution Certificate (for App Store)
   - iOS Development Certificate (for testing)

### 3. Fastlane Match Setup (Recommended)
Run the following commands in your project directory:

```bash
# Initialize Fastlane Match
bundle exec fastlane match init

# Generate and store certificates
bundle exec fastlane match development
bundle exec fastlane match appstore
```

### 4. Manual Certificate Setup (Alternative)
If not using Fastlane Match:

1. Download certificates from Apple Developer Portal
2. Install certificates in Keychain Access
3. Download provisioning profiles
4. Place provisioning profiles in: `~/Library/MobileDevice/Provisioning Profiles/`

### 5. Xcode Configuration
1. Open `ios/Runner.xcworkspace` in Xcode
2. Select Runner target
3. Go to "Signing & Capabilities"
4. Select your team and provisioning profile
5. Set bundle identifier

## Security Notes
- Store certificates securely
- Never commit certificates to version control
- Use Fastlane Match for team collaboration
- Rotate certificates before expiration

## Troubleshooting
- Ensure bundle ID matches exactly
- Check certificate expiration dates
- Verify provisioning profile includes all devices
- Clear derived data if build fails

## Next Steps
After setup, you can build and deploy with:
```bash
flow deployment release
```

---
Generated by Flow CLI on {config.get('timestamp', 'unknown date')}
"""

    with open(instructions_path, "w") as f:
        f.write(instructions)


def show_keystore_results(results: list, keys_dir: Path) -> None:
    """Show keystore generation results"""

    console.print("\n[cyan]üìä Keystore Generation Results[/cyan]")

    table = Table(title="üîê Generated Keystores", box=box.ROUNDED)
    table.add_column("Platform", style="cyan")
    table.add_column("Status", style="bold")
    table.add_column("Message", style="dim")

    for result in results:
        if result["success"]:
            status = "[green]‚úÖ Success[/green]"
        else:
            status = "[red]‚ùå Failed[/red]"

        table.add_row(result["platform"], status, result["message"])

    console.print(table)

    # Create .gitignore file
    gitignore_path = keys_dir / ".gitignore"
    if not gitignore_path.exists():
        gitignore_content = """# Generated by Flow CLI
# DO NOT COMMIT THESE FILES TO VERSION CONTROL

# Android keystore
*.jks
*.keystore
keystore.properties

# iOS certificates
*.p12
*.mobileprovision
*.certSigningRequest

# Passwords and keys
*.key
*.pem
*.crt

# All files in this directory are sensitive
*
!.gitignore
!SETUP_INSTRUCTIONS.md
"""

        with open(gitignore_path, "w") as f:
            f.write(gitignore_content)

        console.print(f"[green]‚úÖ Created .gitignore in {keys_dir}[/green]")


def show_security_instructions(keys_dir: Path) -> None:
    """Show security instructions after keystore generation"""

    instructions = f"""[bold green]üéâ Keystores Generated Successfully![/bold green]

[bold yellow]CRITICAL NEXT STEPS:[/bold yellow]

1. [red]SECURE YOUR KEYSTORES:[/red]
   ‚Ä¢ Create encrypted backups of the keys/ directory
   ‚Ä¢ Store backups in a secure location (encrypted cloud storage)
   ‚Ä¢ Document passwords in a secure password manager

2. [red]PROTECT FROM VERSION CONTROL:[/red]
   ‚Ä¢ Verify .gitignore is working: [cyan]git status[/cyan]
   ‚Ä¢ The keys/ directory should NOT appear in git status
   ‚Ä¢ Never commit these files to any repository

3. [green]CONFIGURE YOUR BUILD:[/green]
   ‚Ä¢ Android: build.gradle has been updated automatically
   ‚Ä¢ iOS: Follow the setup instructions in keys/ios/SETUP_INSTRUCTIONS.md

4. [green]TEST YOUR SETUP:[/green]
   ‚Ä¢ Android: [cyan]flutter build appbundle --release[/cyan]
   ‚Ä¢ iOS: [cyan]flutter build ios --release[/cyan]

5. [green]DEPLOY TO STORES:[/green]
   ‚Ä¢ Run: [cyan]flow deployment release[/cyan]
   ‚Ä¢ This will use your generated keystores

[bold red]‚ö†Ô∏è  REMEMBER:[/bold red]
‚Ä¢ If you lose these files, you cannot update your published apps
‚Ä¢ Store them as securely as you would store your house keys
‚Ä¢ Consider using a hardware security module for enterprise apps

[dim]Keystores location: {keys_dir}[/dim]"""

    panel = Panel(
        instructions, title="üîê Security Instructions", border_style="yellow", box=box.ROUNDED
    )
    console.print(panel)
